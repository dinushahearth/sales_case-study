{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "spw-cg-casestudy"
		},
		"spw-cg-casestudy-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'spw-cg-casestudy-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:spw-cg-casestudy.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"spw-cg-casestudy-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stcgcasestudy.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/spw-cg-casestudy-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('spw-cg-casestudy-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spw-cg-casestudy-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('spw-cg-casestudy-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CreateTables SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n--CREATE SCHEMA Sales\n\nCREATE TABLE Sales.dimOrderDate (\n    [Order_Number] INT NOT NULL,\n    [Order_Date] DATE NULL,\n    [Status] VARCHAR(20) NULL\n)\nWITH(CLUSTERED INDEX ([Order_Number]))\n\n--------------------------------------------\nCREATE TABLE Sales.dimProducts (\n    [Product_Code] VARCHAR NOT NULL,\n    [MSRP] INT NOT NULL,\n    [Product_Line] VARCHAR(50) NOT NULL\n)\nWITH(CLUSTERED INDEX ([Product_Code]))\n\n-----------------------------------------------\nCREATE TABLE Sales.dimSalesDeals(\n    [Sales] INT NOT NULL,\n    [Deal_Size] VARCHAR(30) NULL\n)\nWITH(CLUSTERED INDEX ([Sales]))\n\n----------------------------------------------\nCREATE TABLE Sales.dimCustomers(\n    [Customer_Name] VARCHAR(100) NOT NULL,\n    [Phone] VARCHAR(50) NULL,\n\t[Address_Line1] VARCHAR(100) NULL,\n\t[Address_Line2] VARCHAR(100) NULL,\n\t[City] VARCHAR(50) NULL,\n\t[State] VARCHAR(50) NULL,\n\t[Postal_Code] VARCHAR(50) NULL,\n\t[Country] VARCHAR(50) NULL,\n\t[Territory] VARCHAR(50) NULL,\n\t[Contact_Lastname] VARCHAR(20) NULL,\n\t[Conact_Firstname] VARCHAR(20) NULL\n)\nWITH(CLUSTERED INDEX ([Customer_Name]))\n\n---------------------------------------------\n\nCREATE TABLE Sales.factOrders(\n    [Order_Number] INT NOT NULL,\n    [Product_Code] INT NOT NULL,\n\t[Customer_Name] VARCHAR(100) NOT NULL,\n\t[Quantity_Ordered] INT NOT NULL,\n\t[Price_Each] INT NOT NULL,\n\t[Sales] INT NOT NULL\n\n)\nWITH(CLUSTERED INDEX ([Order_Number],[Product_Code]))\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_cg",
						"poolName": "sales_cg"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ExternalTablesStaging SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n/*\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Hera@123'\n\nCREATE DATABASE SCOPED CREDENTIAL SalesCRED\nWITH IDENTITY = 'Account Key',\nSECRET= '547NffpVoMyDj7N2xeoebprS3OcYZ+FNt8aSWOEfZCVd2K6JjilClnRmYKRLvtW2N0ZP6Zk1t2z5+AStsUTFAw=='\n\n\nCREATE EXTERNAL DATA SOURCE SalesExSource\nWITH(\n    LOCATION = 'abfss://root@stcgcasestudy.dfs.core.windows.net',\n    CREDENTIAL = SalesCRED,\n    TYPE = HADOOP\n)\n\nCREATE EXTERNAL FILE FORMAT SalesExfileF WITH(\n    FORMAT_TYPE = PARQUET\n\t--DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n)\n*/\n\nCREATE EXTERNAL TABLE Sales.ExCustomers(\n\t[Customer_Name] VARCHAR(100) NOT NULL,\n    [Phone] VARCHAR(50) NULL,\n\t[Address_Line1] VARCHAR(100) NULL,\n\t[Address_Line2] VARCHAR(100) NULL,\n\t[City] VARCHAR(50) NULL,\n\t[State] VARCHAR(50) NULL,\n\t[Postal_Code] VARCHAR(50) NULL,\n\t[Country] VARCHAR(50) NULL,\n\t[Territory] VARCHAR(50) NULL,\n\t[Contact_Lastname] VARCHAR(20) NULL,\n\t[Conact_Firstname] VARCHAR(20) NULL\n)\nWITH(\n    LOCATION = 'Sales_Transformed/dimCustomers',\n    DATA_SOURCE = SalesExSource,\n    FILE_FORMAT = SalesExfileF\n)\n\n\nCREATE EXTERNAL TABLE Sales.ExOrderDate (\n    [Order_Number] BIGINT NOT NULL, \n    [Order_Date] DATE NULL,\n    [Status] VARCHAR(20) NULL\n)\nWITH(\n    LOCATION = 'Sales_Transformed/dimOrderDate',\n    DATA_SOURCE = SalesExSource,\n    FILE_FORMAT = SalesExfileF\n)\n\n\nCREATE EXTERNAL TABLE Sales.ExProducts(\n    [Product_Code] VARCHAR(50) NOT NULL,\n    [MSRP] BIGINT NOT NULL,\n    [Product_Line] VARCHAR(50) NOT NULL\n)\nWITH(\n    LOCATION = 'Sales_Transformed/dimProducts',\n    DATA_SOURCE = SalesExSource,\n    FILE_FORMAT = SalesExfileF\n)\n\n\n\n\n\nCREATE EXTERNAL TABLE Sales.ExSalesDeals(\n    [Sales] FLOAT NOT NULL,\n    [Deal_Size] VARCHAR(30) NULL\n)\nWITH(\n    LOCATION = 'Sales_Transformed/dimSalesDeals',\n    DATA_SOURCE = SalesExSource,\n    FILE_FORMAT = SalesExfileF\n)\n\n\n\n\nCREATE EXTERNAL TABLE Sales.ExOrders(\n    [Order_Number] BIGINT NOT NULL,\n    [Product_Code] VARCHAR(50) NOT NULL,\n\t[Customer_Name] VARCHAR(100) NOT NULL,\n\t[Quantity_Ordered] BIGINT NOT NULL,\n\t[Price_Each] FLOAT NOT NULL,\n\t[Sales] FLOAT NOT NULL\n\n)\nWITH(\n    LOCATION = 'Sales_Transformed/factOrders',\n    DATA_SOURCE = SalesExSource,\n    FILE_FORMAT = SalesExfileF\n)\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_cg",
						"poolName": "sales_cg"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nCREATE TABLE #StageCustomers(\n    [Customer_Name] VARCHAR(100) NOT NULL,\n    [Phone] VARCHAR(50) NULL,\n\t[Address_Line1] VARCHAR(100) NULL,\n\t[Address_Line2] VARCHAR(100) NULL,\n\t[City] VARCHAR(50) NULL,\n\t[State] VARCHAR(50) NULL,\n\t[Postal_Code] VARCHAR(50) NULL,\n\t[Country] VARCHAR(50) NULL,\n\t[Territory] VARCHAR(50) NULL,\n\t[Contact_Lastname] VARCHAR(20) NULL,\n\t[Conact_Firstname] VARCHAR(20) NULL\n)\n\nSELECT *\nFROM #StageCustomers\n\n\nCOPY INTO #Sales.dimCustomers \nfrom 'https://stcgcasestudy.dfs.core.windows.net/root/Sales_Transformed/dimCustomers.csv'\nwith(\n    FILE_TYPE = 'CSV',\n    IDENTITY_INSERT= 'OFF',\n    FIRSTROW = 2\n)\n\n\nSELECT *\nFROM Sales.dimCustomers\n\n/*\n\n\ndrop EXTERNAL TABLE Sales.ExCustomers\nDROP EXTERNAL FILE FORMAT SalesExfileF \nDROP EXTERNAL DATA SOURCE SalesExSource\n\n\n\n*/\n\nINSERT INTO Sales.dimCustomers ([Customer_Name],\n    [Phone] ,\n\t[Address_Line1] ,\n\t[Address_Line2] ,\n\t[City] ,\n\t[State],\n\t[Postal_Code] ,\n\t[Country] ,\n\t[Territory] ,\n\t[Contact_Lastname] ,\n\t[Conact_Firstname] )\nfrom 'https://stcgcasestudy.dfs.core.windows.net/root/Sales_Transformed/dimCustomers.csv'\nwith(\n    FILE_TYPE = 'CSV',\n    IDENTITY_INSERT= 'OFF',\n    FIRSTROW = 2\n)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_cg",
						"poolName": "sales_cg"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/data_transformation')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "salespycg",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9a6de002-001a-4e0a-9100-b7af2b588136"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/db4275ee-9033-4e8e-bb2d-da5afdd33f33/resourceGroups/case-study/providers/Microsoft.Synapse/workspaces/spw-cg-casestudy/bigDataPools/salespycg",
						"name": "salespycg",
						"type": "Spark",
						"endpoint": "https://spw-cg-casestudy.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/salespycg",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#importing necessary libraries\r\n",
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"path = 'abfss://root@stcgcasestudy.dfs.core.windows.net'\r\n",
							"\r\n",
							"#loading the raw sales data from data lake gen 2\r\n",
							"sales_data = spark.read.load(f\"{path}/sales_rawfile/sales_data_sample.csv\",format='csv',header=True)\r\n",
							"\r\n",
							"#convert to pandas dataframe\r\n",
							"sales_data = sales_data.toPandas()\r\n",
							"\r\n",
							"#first 10 rows\r\n",
							"#sales_data.head(10)"
						],
						"outputs": [],
						"execution_count": 50
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#removing unnecessary columns\r\n",
							"un_columns = ['ORDERLINENUMBER','QTR_ID','MONTH_ID','YEAR_ID']\r\n",
							"\r\n",
							"sales_data.drop(un_columns,axis=1,inplace=True)"
						],
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#converting data types of the necessary columns\r\n",
							"sales_data['ORDERDATE'] = pd.to_datetime(sales_data['ORDERDATE'])\r\n",
							"\r\n",
							"num_columns = ['ORDERNUMBER','QUANTITYORDERED','PRICEEACH','SALES','MSRP']\r\n",
							"\r\n",
							"for col in num_columns:\r\n",
							"    try:\r\n",
							"        sales_data[col] = sales_data[col].astype(int)\r\n",
							"    except ValueError:\r\n",
							"        sales_data[col] = sales_data[col].astype(float)\r\n",
							"\r\n",
							"\r\n",
							"sales_data.info()"
						],
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#corrected the values of SALES column by;\r\n",
							"sales_data['SALES'] =sales_data['QUANTITYORDERED'] * sales_data['PRICEEACH']\r\n",
							"\r\n",
							"'''\r\n",
							"0 - 3000 = Small \r\n",
							"3000 - 6000 = Medium\r\n",
							"6000 <=  = Large\r\n",
							"'''\r\n",
							"\r\n",
							"sales_data['DEALSIZE'] = sales_data['SALES'].apply(lambda x: 'Small' if x >= 0 and x < 3000 \r\n",
							"else ('Medium' if x >= 3000 and x < 6000 else 'Large'))"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#OrderDate dimention table\r\n",
							"dimOrderDate = sales_data[['ORDERNUMBER','ORDERDATE','STATUS']].drop_duplicates().reset_index(drop=True)\r\n",
							"\r\n",
							"#Products dimention table\r\n",
							"dimProducts = sales_data[['PRODUCTCODE','MSRP','PRODUCTLINE']].drop_duplicates().reset_index(drop=True)\r\n",
							"\r\n",
							"#Customers dimention table\r\n",
							"dimCustomers = sales_data[['CUSTOMERNAME', 'PHONE',\r\n",
							"       'ADDRESSLINE1', 'ADDRESSLINE2', 'CITY', 'STATE', 'POSTALCODE',\r\n",
							"       'COUNTRY', 'TERRITORY', 'CONTACTLASTNAME', 'CONTACTFIRSTNAME']].drop_duplicates().reset_index(drop=True)\r\n",
							"\r\n",
							"#SalesDeals dimention table\r\n",
							"dimSalesDeals = sales_data[['SALES','DEALSIZE']].drop_duplicates().reset_index(drop=True) #transitive dependency\r\n",
							"\r\n",
							"#Orders fact table\r\n",
							"factOrders = sales_data[['ORDERNUMBER','PRODUCTCODE','CUSTOMERNAME','QUANTITYORDERED', 'PRICEEACH', 'SALES']]"
						],
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#loading transformed data into the data lake\r\n",
							"for file, filename in [(dimOrderDate, \"dimOrderDate\"), (dimProducts, \"dimProducts\"), (dimCustomers, \"dimCustomers\"), (dimSalesDeals, \"dimSalesDeals\"), (factOrders, \"factOrders\")]:\r\n",
							"    file = spark.createDataFrame(file).repartition(1)\r\n",
							"    file.write.parquet(f\"{path}/Sales_Transformed/{filename}\",mode='overwrite')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 55
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sales_cg')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/salespycg')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SCD Type 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "------------------------------------------------------------------------------------------------------------------------------------------------------------\nCREATE PROCEDURE Sales.loading_data_SCD1 AS\nBEGIN\n---Insert new records\nINSERT INTO Sales.dimCustomers\nSELECT *\nFROM Sales.ExCustomers as stg\nWHERE NOT EXISTS(\n    SELECT *\n    FROM Sales.dimCustomers AS dim WHERE dim.Customer_Name = stg.Customer_Name\n)\n\n\n---SCD Type 1\nUPDATE Sales.dimCustomers\nSET Phone = stg.Phone ,\n    Address_Line1 = stg.Address_Line1,\n    Address_Line2 = stg.Address_Line2,\n    City =  stg.City, \n    State =  stg.State, \n    Postal_Code =  stg.Postal_Code,\n    Country =  stg.Country, \n    Territory =  stg.Territory, \n    Contact_Lastname =  stg.Contact_Lastname,\n    Conact_Firstname =  stg.Conact_Firstname\nFROM Sales.dimCustomers AS dim INNER JOIN Sales.ExCustomers AS stg\nON dim.Customer_Name = stg.Customer_Name\nWHERE dim.Phone <> stg.Phone \nOR dim.Address_Line1 <> stg.Address_Line1 \nOR dim.Address_Line2 <> stg.Address_Line2\nOR dim.City <> stg.City \nOR dim.State <> stg.State \nOR dim.Postal_Code <> stg.Postal_Code\nOR dim.Country <> stg.Country \nOR dim.Territory <> stg.Territory \nOR dim.Contact_Lastname <> stg.Contact_Lastname\nOR dim.Conact_Firstname <> stg.Conact_Firstname\n\nALTER INDEX ALL ON  Sales.dimCustomers REBUILD\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nINSERT INTO Sales.dimOrderDate\nSELECT *\nFROM Sales.ExOrderDate AS stg\nWHERE NOT EXISTS(\n    SELECT *\n    FROM Sales.dimOrderDate AS dim WHERE dim.Order_Number = stg.Order_Number \n)\n\n---SCD Type 1\nUPDATE Sales.dimOrderDate\nSET Order_Date = stg.Order_Date,\n    Status = stg.Status \nFROM Sales.dimOrderDate AS dim INNER JOIN Sales.ExOrderDate AS stg ON dim.Order_Number = stg.Order_Number \nWHERE dim.Order_Date <> stg.Order_Date OR dim.Status <> stg.Status \n\nALTER INDEX ALL ON Sales.dimOrderDate REBUILD\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n\nINSERT INTO Sales.dimProducts\nSELECT *\nFROM Sales.ExProducts AS stg\nWHERE NOT EXISTS(\n    SELECT *\n    FROM Sales.dimProducts AS dim WHERE dim.Product_Code = stg.Product_Code\n)\n\n---SCD Type 1\nUPDATE Sales.dimProducts\nSET MSRP = stg.MSRP,\n    Product_Line = stg.Product_Line\nFROM Sales.dimProducts AS dim INNER JOIN Sales.ExProducts AS  stg ON dim.Product_Code = stg.Product_Code\nWHERE dim.MSRP <> stg.MSRP OR dim.Product_Line <> stg.Product_Line\n\nALTER INDEX ALL ON Sales.dimProducts REBUILD\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\nINSERT INTO Sales.dimSalesDeals\nSELECT *\nFROM Sales.ExSalesDeals AS stg\nWHERE NOT EXISTS(\n    SELECT *\n    FROM Sales.dimSalesDeals AS dim WHERE dim.Sales = stg.Sales\n)\n\n---SCD Type 1\nUPDATE Sales.dimSalesDeals\nSET Deal_Size = stg.Deal_Size\nFROM Sales.dimSalesDeals AS dim INNER JOIN Sales.ExSalesDeals AS stg ON dim.Sales = stg.Sales\nWHERE dim.Deal_Size <> stg.Deal_Size \n\nALTER INDEX ALL ON Sales.dimSalesDeals REBUILD\n\nEND\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sales_cg",
						"poolName": "sales_cg"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sales')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data Transformation",
						"description": "The raw data is being transformed in this phase",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "data_transformation",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "salespycg",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {},
							"driverSize": "Small"
						}
					},
					{
						"name": "Data Loading",
						"description": "Data loading will be processed in this phase with SCD type 1",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data Transformation",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "sales_cg",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[Sales].[loading_data_SCD1]"
						}
					},
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "spw-cg-casestudy-WorkspaceDefaultSqlServer",
							"type": "LinkedServiceReference",
							"parameters": {}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/data_transformation')]",
				"[concat(variables('workspaceId'), '/bigDataPools/salespycg')]",
				"[concat(variables('workspaceId'), '/sqlPools/sales_cg')]",
				"[concat(variables('workspaceId'), '/linkedServices/spw-cg-casestudy-WorkspaceDefaultSqlServer')]"
			]
		}
	]
}